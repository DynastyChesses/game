//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.36213
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;
using UnityEngine.EventSystems;
using DG.Tweening;
using HotUpdate;

public class ListComponent : AbstractListComponent
{
	private const int NONE_INDEX_COMMIT = -2;
	private const int NONE_INDEX_SELECT = -1;
	

    public delegate void OnFocusedItemChanged(int index, object data);

    public delegate void OnItemFocused(int index, object data);

	public GameObject container;

	public ScrollRect scrollView;

	public GameObject itemTemplate;

	public Text title;
	
	/// <summary>
	/// 默认选中
	/// </summary>
	public bool requireSelection = false;
	/// <summary>
	/// 拖拽后选中离center最近的
	/// </summary>
    public bool focusWhenDragFinish = false;
	
	public bool raiseEventToParentCpt = true;
	/// <summary>
	/// 选中后滑动到该item
	/// </summary>
	public bool focusSelectItem = false;

	public event OnItemEvent onItemEvent;

    public event OnSelectItemChanged onSelectItemChanged;

    public event OnFocusedItemChanged onFocusedItemChanged;

    public event OnItemFocused onItemFocused;

	public event Action onValidateDataComplete;

    private IItemRendererFactory _itemFactory;
    
    private HostArray<Vector3> _viewCorners = HostArray<Vector3>.Create(4);
    private HostArray<Vector3> _tmpCorners = HostArray<Vector3>.Create(4);

    public int focusedIndex { get; private set; }

    public IItemRendererFactory itemFactory
    {
        get
        {
			return _itemFactory;
        }

		set { _itemFactory = value; }
    }

//	[HideInInspector] 
//	public Type itemClass;

	public bool preventSelectionChange = false;
	
    public AbstractListComponent parentComponent;

    protected bool _initDone = false;

	private int _selectedIndex = NONE_INDEX_SELECT;
	
	private int _proposedSelectedIndex = NONE_INDEX_COMMIT;

	private List<IItemRenderer> _renderers = new List<IItemRenderer>();

	private UIEventListener _bgEventListener;

	private int _lastActiveRendererNum = 0;

    private bool _forceFoucs = false;

    /// <summary>
    /// 异步加载
    /// </summary>
    public bool isAsync = false;
    public bool isLoaded = false;
    public string defaultPrefab = string.Empty;
    public Action<GameObject> asyncCallback = null;
    private IAsyncResourceRequest req = null;

	public int selectedIndex
	{
		get
		{
			return _selectedIndex;
		}
		
		set
		{
			SelectIndex(value, false);
		}
	}
    public int rendererCount
    {
        get { return _renderers.Count; }
    }
   
    /// <summary>
    /// Data can be null~
    /// </summary>
    /// <value>The selected data.</value>
    public object selectedData
    {
        get
        {
            if (m_data == null)
                return null;
            if(m_data.Count <= 0)
                return null;
            if(selectedIndex == NONE_INDEX_SELECT && requireSelection)
                _selectedIndex = 0;
            if (selectedIndex < 0 || selectedIndex >= m_data.Count)
                return null;
            return m_data[selectedIndex];
        }
    }
	
	private IList m_data;

	public float default_scale = 1.0f;

	private bool m_dataInvalid = false;

	public bool dataInvalid
	{
		get { return m_dataInvalid; }
	}
	
	public IList data
	{
		get
		{
			return m_data;
		}
		
		set
		{
			m_data = value;
			if (isAsync)
			{
				if (!isLoaded)
				{
					// 进行加载
					if (defaultPrefab != string.Empty && req == null)
					{
						req = ResourceFacade.instance.LoadPrefabAsync(defaultPrefab);
						req.callback = request =>
						{
							var o = request.asset as GameObject;
							o.gameObject.SetActive(false);
							o.transform.SetParent(this._gameObject.transform);
							o.transform.localScale = Vector3.one * default_scale;
							this.itemTemplate = o;
							if (asyncCallback != null)
							{
								asyncCallback.Invoke(o);
							}
							req.Dispose();
							req = null;
							isLoaded = true;
							//
							m_dataInvalid = true;
							_forceFoucs = true;
							_nextRenderIndex = 0;
							if (m_data == null)
							{
								ValidateData();
							}
						};
					}
					return;
				}
			}
			m_dataInvalid = true;
			_forceFoucs = true;
			_nextRenderIndex = 0;
			if (m_data == null)
			{
				ValidateData();
			}
		}
	}

	public override object context
	{
		get; set; 
	}

    public virtual Vector2 GetItemRendererSizeAt(int index)
    {
        return Vector2.zero;
    }

    private Transform _containerTrans;

    public RectTransform customCenter;

    private int _updator;

    private GameObject _gameObject;

    private MonoVisibleEventListener _liftcycleListener = null;
    	
    /// <summary>
    /// 该值为true时需要自己调用scrollview的ondrag等方法。
    /// </summary>
    public bool blockScrollViewEvent = false;
    
    public ListComponent(GameObject go
	    ,GameObject container
	    ,ScrollRect scrollRect = null
	    ,GameObject itemTemplate = null
	    ,bool requireSelection = true
	    ,bool focusWhenDragFinish = false
	    ,bool raiseEventToParentCpt = false
	    ,bool focusSelectItem = false
	    ,RectTransform customCenter = null
	    ,bool isAsync = false
	    ,float scale = 1.0f
	    )
    {
	    this.default_scale = scale;
	    this._gameObject = go;
	    this.container = container;
	    this.scrollView = scrollRect;
	    this.isAsync = isAsync;
	    if (!this.isAsync)
	    {
		    this.itemTemplate = itemTemplate;
	    }
	    this.requireSelection = requireSelection;
	    this.focusWhenDragFinish = focusWhenDragFinish;
	    this.raiseEventToParentCpt = raiseEventToParentCpt;
	    this.focusSelectItem = focusSelectItem;
	    this.customCenter = customCenter;
	    
	    
	    this._liftcycleListener = MonoVisibleEventListener.Get(go);

	    if (_liftcycleListener != null)
	    {
		    _liftcycleListener.onEnable += OnEnable;
		    _liftcycleListener.onDisable += OnDisable;
	    }
	    
	    _updator = EquineScheduler.AddFrameLimitUpdator(1, Update, null);
	    if(!_initDone)
		    Init();
    }

    private void OnEnable(GameObject go)
    {
	    if (EquineScheduler.IsValid(_updator))
	    {
		    EquineScheduler.SetActive(_updator, true);
	    }
    }
    private void OnDisable(GameObject go)
    {
	    if (EquineScheduler.IsValid(_updator))
	    {
		    EquineScheduler.SetActive(_updator, false);
	    }
    }
    void OnDestroy()
	{
	
	}

	public void Dispose()
	{
		
		if (isAsync)
		{
			isLoaded = false;
			defaultPrefab = string.Empty;
			asyncCallback = null;
			if (req != null)
			{
				req.Dispose();
				req = null;
			}
		}
		
		if (scrollView != null)
		{
			scrollView.DOKill();
		}
		m_dataInvalid = false;
		m_data = null;
        int count = _renderers.Count;
        if (itemFactory != null)
        {
	        for(int i = 0; i < count; ++i)
	        {
		        itemFactory.DestroyItem(_renderers[i]);
	        }
        }
        else
        {
	        for(int i = 0; i < count; ++i)
	        {
		        if (_renderers[i] is CommonItemRenderer)
		        {
			        (_renderers[i] as CommonItemRenderer).Dispose();
		        }
	        }
        }
        
		_renderers.Clear();
	    _lastActiveRendererNum = 0;
	    
	    if (_liftcycleListener != null)
	    {
		    _liftcycleListener.onEnable -= OnEnable;
		    _liftcycleListener.onDisable -= OnDisable;
		    _liftcycleListener = null;
	    }

	    EquineScheduler.RemoveLimitUpdator(ref _updator);
	}

    protected virtual void Init()
    {
        _initDone = true;

        _containerTrans = container != null ? container.transform : null;
        if (_containerTrans != null)
        {
            while (_containerTrans.childCount > 0)
            {
                Transform childTrans = _containerTrans.GetChild(0);
                childTrans.SetParent(null);
                if (!isAsync)
                {
	                ResourceFacade.instance.Unload(childTrans.gameObject);
                }
                else
                {
	                GameObjectPool.instance.Recycle(childTrans.gameObject);
                }
            }
        }

        _selectedIndex = requireSelection ? (_proposedSelectedIndex != NONE_INDEX_COMMIT ? _proposedSelectedIndex : 0) : NONE_INDEX_SELECT;
        
		if (itemTemplate != null && itemTemplate.transform.parent != null)
		{
			itemTemplate.gameObject.SetActive(false);
		}
        
        focusedIndex = NONE_INDEX_SELECT;

        if (scrollView != null)
        {
	        scrollView.onValueChanged.AddListener(OnMove);
	        UIEventListener.OnDragEnd(scrollView.gameObject).AddListener(OnMomentumMove);
        }
    }

    private void OnMomentumMove(GameObject go,PointerEventData data)
    {
	    if (!focusWhenDragFinish)
	    {
		    return;
	    }

	    TriggerFocusEvent(go);
    }

    private void TriggerFocusEvent(GameObject go)
    {
        int renderCount = null != _renderers ? _renderers.Count : 0;

        int calcFocusIndex = CalcFocusedIndex();

        bool trigger = focusedIndex != calcFocusIndex;

        if (focusedIndex != calcFocusIndex)
        {
            focusedIndex = calcFocusIndex;
        }

        IItemRenderer render = null;

        if (focusedIndex >= 0 && focusedIndex < renderCount)
        {
            render = _renderers[focusedIndex];
        }

        if (null != render && null != onItemFocused && (_forceFoucs || trigger))
        {
            if (_forceFoucs)
            {
                _forceFoucs = false;
            }

            onItemFocused(render.index, render.data);
        }

        if (focusWhenDragFinish && focusedIndex != -1)
        {
            MoveToIndex(focusedIndex, true, false, false);
        }
    }

    private void OnCenterChild(GameObject go)
	{
	    if (null == go)
	    {
	        return;
	    }

		IItemRenderer renderer = GetItemRendererByGameObject(go);
		if (renderer != null && renderer.data != null)
		{
			SelectIndex(renderer.index, true);
		}
	}

    private void OnMove(Vector2 delta)
    {
        if (null == onFocusedItemChanged && null == onItemFocused && !focusWhenDragFinish)
        {
            return;
        }
        int calcFocusIndex = CalcFocusedIndex();
        if (calcFocusIndex >= 0 && calcFocusIndex != focusedIndex)
        {
            focusedIndex = calcFocusIndex;
            if (null != onFocusedItemChanged)
            {
                onFocusedItemChanged(calcFocusIndex, _renderers[calcFocusIndex].data);
            }
        }
    }

    private int CalcFocusedIndex(float factor = 1f)
    {
        int count=0;
        for (int i = 0; i < (null != _renderers ? _renderers.Count : 0); i++)
        {
            if (_renderers[i].data != null)
            {
                count++;
            }
        }
        Vector3 focuseCenter = CalcFocusedCenter();

        int calcFocusIndex = -1;
		float distance = float.MaxValue;
		
        for (int i = 0; i < count; i++)
        {
            if (_renderers[i].data == null)
            {
                continue;
            }

            RectTransform itemRect = _renderers[i].rectTransform;
            itemRect.GetWorldCorners(_tmpCorners.ToMonoArray());
            Vector3 itemCenter = (_tmpCorners[0] + _tmpCorners[2]) * 0.5f;
            if (scrollView.horizontal)
            {
	            float xdis = Mathf.Abs(itemCenter.x - focuseCenter.x);
	            if (distance > xdis)
	            {
		            distance = xdis;
		            calcFocusIndex = i;
	            }
            }
            else if (scrollView.vertical)
            {
	            float ydis = Mathf.Abs(itemCenter.y - focuseCenter.y);
	            if (distance > ydis)
	            {
		            distance = ydis;
		            calcFocusIndex = i;
	            }
            }
        }

        return calcFocusIndex;
    }

    public Vector3 CalcFocusedCenter()
    {
        if (customCenter != null)
        {
	        customCenter.GetWorldCorners(_viewCorners.ToMonoArray());
	        Vector3 panelCenter = (_viewCorners[0] + _viewCorners[2]) * 0.5f;
	        return panelCenter;
        }
        else if (scrollView != null)
        {
            scrollView.viewport.GetWorldCorners(_viewCorners.ToMonoArray());
            Vector3 panelCenter = (_viewCorners[0] + _viewCorners[2]) * 0.5f;
            return panelCenter;
        }
	    return Vector3.zero;
    }

	/// <summary>
	/// If the object should support the scroll wheel, do it.
	/// </summary>
	public void ResetScroll() 
	{
		if (scrollView != null)
		{
			if (scrollView.horizontal)
			{
				//左
				scrollView.horizontalNormalizedPosition = 0;
			}
			if(scrollView.vertical)
			{
				//上
				scrollView.verticalNormalizedPosition = 1;
			}
		}
	}
	
	private bool m_dispatchChangeEvent = false;
	private bool _blockClickEvent = false;

	public override void OnItemEventRaised(IItemRenderer render, string eventName, object param)
	{
		if (eventName == ItemRendererEventNames.CLICK && _blockClickEvent)
		{
			return;
		}
		
		switch(eventName)
		{
		case ItemRendererEventNames.DRAGBEGIN:
			if (!blockScrollViewEvent && scrollView != null)
			{
				scrollView.OnBeginDrag((PointerEventData)param);
			}

			_blockClickEvent = true;
			break;
		case ItemRendererEventNames.DRAGEND:
			if (!blockScrollViewEvent && scrollView != null)
			{
				scrollView.OnEndDrag((PointerEventData)param);
			}

			_blockClickEvent = false;
			break;
		case ItemRendererEventNames.DRAG:
			if (!blockScrollViewEvent && scrollView != null)
			{
				scrollView.OnDrag((PointerEventData)param);
			}
			
			break;
		case ItemRendererEventNames.CLICK:
			// Logger.Debug("ListComponent Click");
			if (requireSelection&&object.ReferenceEquals(render.host, this) && render.data != null && render.selectable)
			{
				SelectIndex(render.index, true);
			}
			break;
		default:
			break;
		}
		
		if (onItemEvent != null)
		{
			onItemEvent(render, eventName, param);
		}

        if(raiseEventToParentCpt && parentComponent != null)
        {
            parentComponent.OnItemEventRaised(render, eventName, param);
        }
	}

	public IItemRenderer GetItemRendererAt(int index)
	{
		return index >= 0 && index < _renderers.Count ? _renderers[index] : null;
	}

	public IItemRenderer GetItemRendererByGameObject(GameObject go)
	{
		int count = _renderers != null ? _renderers.Count : 0;
		for (int i = 0; i < count; ++i)
		{
			if (_renderers[i].viewObject == go)
			{
				return _renderers[i];
			}		
		}
		return null;
	}

//	private struct MoveToIndexContext
//	{
//		public int index;
//		public bool selected;
//		public bool instant;
//		public bool triggerFocus;
//	}
//
//	private MoveToIndexContext _moveToIndexContext;
//	private bool _pendingMoveToIndexContext;
	
    public void MoveToIndex(int index, bool selected = true, bool instant = false, bool triggerFocus = true)
    {
        if(scrollView == null)
        {
	        Debug.LogError("Calling MoveToIndex need ScrollView component");
            return;
        }
        if(index < 0 || index >= _renderers.Count)
        {
	        //TODO
// #if UNITY_EDITOR
	        Debug.LogError("index param is error : " + index);
// #endif
            return;
        }

		var rectTrans = _renderers[index].rectTransform;
        if(instant)
        {
            focusedIndex = index;
            if (triggerFocus)
            {
                TriggerFocusEvent(_renderers[index].viewObject);
            }
        }
        else
        {
            // TODO
        }
        if(selected)
        {
            SelectIndex(index, true);
        }
    }

	public void SelectIndex(int index, bool dispatchChangeEvent)
	{
		if (_selectedIndex != index && !preventSelectionChange)
		{
			_proposedSelectedIndex = index;
			m_dispatchChangeEvent = dispatchChangeEvent;
		}
	}
	
	private static void PositiveVector2(ref Vector2 vec)
	{
		vec.x = vec.x < 0 ? -vec.x : vec.x;
		vec.y = vec.y < 0 ? -vec.y : vec.y;
	}
	
	public override void Reposition(bool asyncMode = true)
	{
	}

//	protected virtual int CalculateRenderNum(int dataNum)
//	{
//		return dataNum;
//	}

	private Vector2 _lastScrollVelocity = Vector2.zero;
	public void Update (int updator, object data, UpdateTimeInfo info)
	{
		if (!Application.isPlaying) 
		{
			return;
		}

		ValidateData();

		int count = _renderers.Count;
		for (int i = 0; i < count; ++i)
		{
			if (_renderers[i].data != null)
			{
				_renderers[i].OnUpdate();
			}
		}
	}

	public void InvalidateData()
	{
		m_dataInvalid = true;
		_nextRenderIndex = 0;
	}

    /// <summary>
    /// 设置数据
    /// </summary>
    /// <param name="index">索引</param>
    /// <param name="data">数据</param>
    /// <param name="refresh">刷新</param>
    public void SetData(int index, object data, bool refresh = true)
    {
        if (index >= 0 && index < _renderers.Count)
        {
            IItemRenderer renderer = _renderers[index];
            if (renderer != null)
            {
                renderer.data = data;
                if (refresh) renderer.Refresh();
            }
        }
    }

    /// <summary>
    /// 更新数据
    /// </summary>
    /// <param name="oldData">原数据</param>
    /// <param name="newData">新数据</param>
    /// <param name="refresh">刷新</param>
    public void UpdateData(object oldData, object newData, bool refresh = true)
    {
        if (oldData == null || m_data == null) return;
        int index = m_data.IndexOf(oldData);
        SetData(index, newData, refresh);
    }
    
	public void Refresh(int index = -1)
	{
		if (m_dataInvalid)
		{
			return;
		}

		if (index >= 0 && index < _renderers.Count)
		{
			DoRefresh(index);
		}
		else
		{
			int count = _renderers.Count;
			for (int i = 0; i < count; ++i)
			{
				DoRefresh(i);
			}
		}
	}
    public void Refresh(object data)
    {
	    if (m_dataInvalid)
	    {
		    return;
	    }
        if (data == null || m_data == null)
        {
            return;
        }
        else
        {
            int index = m_data.IndexOf(data);
            Refresh(index);
        }
    }
	private void DoRefresh(int index)
	{
		IItemRenderer renderer = _renderers[index];
		if (renderer != null)
		{
			renderer.Refresh();
		}
	}
	
	public void ValidateData()
	{
		if (!_initDone)
		{
			//如果这个时候没active，那很可能很多组件的Awake(比如UIScrollView)还没执行，所以不能贸然去Init
			if (!_gameObject.activeInHierarchy)
			{
				return;
			}
			Init();
		}

		int dataNum = m_data != null ? m_data.Count : 0;
		bool dataValidated = false;
		if (m_dataInvalid)
		{
			if (FrameConfigItemRenderer(dataNum))
			{
				return;
			}

			m_dataInvalid = false;
			
			if (dataNum == 0)
			{
				focusedIndex = NONE_INDEX_SELECT;
			}
			
			if (_proposedSelectedIndex != NONE_INDEX_COMMIT)
			{
				_selectedIndex = NONE_INDEX_SELECT;
			}
			else if (_selectedIndex >= 0 && _selectedIndex < dataNum)
			{
				_proposedSelectedIndex = _selectedIndex;
				_selectedIndex = NONE_INDEX_SELECT;
			}
			else
			{
				_selectedIndex = NONE_INDEX_SELECT;
				_proposedSelectedIndex = requireSelection ? 0 :NONE_INDEX_SELECT;
			}

			m_dispatchChangeEvent = true;

			dataValidated = true;
		}
		
		if (_proposedSelectedIndex != NONE_INDEX_COMMIT)
		{
			int oldSelectIndex = _selectedIndex;
			
			if (_selectedIndex != NONE_INDEX_SELECT)
			{
				ItemSelect(_selectedIndex, false);
			}
			
			_selectedIndex = _proposedSelectedIndex;
			
			_proposedSelectedIndex = NONE_INDEX_COMMIT;
			
			if (_selectedIndex != NONE_INDEX_SELECT)
			{
				if (_selectedIndex >= dataNum && dataNum > 0)
				{
					_selectedIndex = dataNum - 1;
				}
				ItemSelect(_selectedIndex, true);
			}
			
			if (m_dispatchChangeEvent)
			{
				m_dispatchChangeEvent = false;

				bool nothingSelect = oldSelectIndex == _selectedIndex && _selectedIndex == NONE_INDEX_SELECT;
				if (!nothingSelect)
				{
					// TODO
					if (onSelectItemChanged != null)
					{
						onSelectItemChanged(oldSelectIndex,
							oldSelectIndex >= 0 && oldSelectIndex < dataNum ? m_data[oldSelectIndex] : null, _selectedIndex,
							_selectedIndex >= 0 && _selectedIndex < dataNum ? m_data[_selectedIndex] : null);
					}
				}
			}
		}

		if (dataValidated && onValidateDataComplete != null)
		{
			onValidateDataComplete();
		}
	}

    private int _frameNum = -1;
    private int _nextRenderIndex = 0;

    

	public void SetFrameCreateNum(int frameCreateNum)
	{
		_frameNum = frameCreateNum;
	}
	
	private bool FrameConfigItemRenderer(int dataNum)
	{
		IItemRenderer render;
		GameObject itemObj;
		int i = _nextRenderIndex;
		
		int lastRenderNum = _renderers.Count;
		
		int createNum = 0;
		
		for (; i < dataNum; ++i)
		{
			if (i >= lastRenderNum)
			{
				if (_frameNum == -1)
				{
					long startTime = RealTimer.elapsedMilliseconds;
					if (itemTemplate != null)
					{
						render = itemFactory.CreateItem(itemTemplate);
					}
					else
					{
						render = new CommonItemRenderer(_containerTrans);
					}
					
					int elapsedTime = (int)(RealTimer.elapsedMilliseconds - startTime);
					elapsedTime = Math.Max(elapsedTime, 1);
					_frameNum = 33 / elapsedTime;
					_frameNum = Math.Max(_frameNum, 1);
				}
				else
				{
					if (itemTemplate != null)
					{
						render = itemFactory.CreateItem(itemTemplate);
					}
					else
					{
						render = new CommonItemRenderer(_containerTrans);
					}
				}

				itemObj = render != null ? render.viewObject : null;
				if (itemObj != null)
				{
					itemObj.transform.SetParent(_containerTrans);
					itemObj.transform.localPosition = Vector3.zero;
					itemObj.transform.localRotation = Quaternion.Euler(Vector3.zero);
					itemObj.transform.localScale = Vector3.one;
				}
				SetRender(ref render, dataNum, i);

				_renderers.Add(render);
				createNum++;
			}
			else
			{
				render = _renderers[i];
				itemObj = render.viewObject;
				if (itemObj != null)
				{
					itemObj.SetActive(true);
				}
				else if (render != null)
				{
					if (render is CommonItemRenderer)
					{
						if (((CommonItemRenderer)render).render.gameObject != null)
						{
							((CommonItemRenderer)render).render.gameObject.SetActive(true);
						}
					}
				}
				


				SetRender(ref render, dataNum, i);
			}

			if (createNum >= _frameNum)
			{
				break;
			}
		}

		_nextRenderIndex = i;
		
		for (i = dataNum; i < lastRenderNum; ++i)
		{
			render = _renderers[i];
			if (render != null)
			{
				render.data = null;
				render.selected = false;
				var commonItemRender = render as CommonItemRenderer;
				if (commonItemRender != null)
				{
					if (commonItemRender.render.viewObject != null)
					{
						commonItemRender.render.viewObject.SetActive(false);
					}
				}
				else
				{
					itemObj = render.viewObject;
					if (itemObj != null)
					{
						itemObj.SetActive(false);
					}	
				}
			}
		}
		
		if (_lastActiveRendererNum != _nextRenderIndex)
		{
			_lastActiveRendererNum = _nextRenderIndex;
			Reposition(false);
		}
		
		return _nextRenderIndex < dataNum;
	}

	private void SetRender(ref IItemRenderer render, int dataNum, int index)
	{
		if (render != null)
		{
			if (render.viewObject != null)
			{
				render.viewObject.name = index.ToString();
			}
			render.host = this;
			render.index = index;
			render.selected = false;
			render.selectable = true;
			var commonItemRender = render as CommonItemRenderer;
			if (commonItemRender != null)
			{
				commonItemRender.index = index;
				if (Math.Abs(default_scale - 1.0f) > 0.001f)
				{
					var ctx = new CommonItemRenderContext();
					ctx.scale = default_scale;
					this.context = ctx;
					commonItemRender.host = this;
				}
				commonItemRender.data = index < dataNum ? m_data[index] : null;
			}
			else
			{
				render.data = index < dataNum ? m_data[index] : null;
			}
		}
	}
	
	private void ItemSelect(int index, bool selected)
	{
		if (m_data == null || m_data.Count <= index)
		{
			return;
		}
		IItemRenderer render = _renderers[index];
		if (render != null)
		{
			render.selected = selected;
		}
	}

}

